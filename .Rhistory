cube <- function(x, n) {
}
x^3
cube <- function(x, n) {
x^3}
cube(3)
library(data.table)
install.packages(c("abind", "boot", "codetools", "jsonlite", "lattice", "manipulate", "MASS", "Matrix", "mgcv", "mime", "plyr", "Rcpp", "RCurl", "RMySQL", "stringr"))
installed.package()
installed.packages()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
lm(formula = mpg ~ cyl + hp + wt + am, data = mtcars)
summary( lm(formula = mpg ~ cyl + hp + wt + am, data = mtcars))
par(mfrow=c(2, 2))
plot(bestmodel)
bestmodel <- step(initialmodel, direction = "both")
initialmodel <- lm(mpg ~ ., data = mtcars)
bestmodel <- step(initialmodel, direction = "both")
par(mfrow=c(2, 2))
plot(bestmodel)
library(datasets)
data(mctars)
library(datasets)
data(mtars)
library(datasets)
data(mtcars)
head(mtcars)
source('~/.active-rstudio-document', echo=TRUE)
library(datasets)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars$am_m <- as.factor(mtcars$am, levels = c(automatic, manual))
install.packages("UsingR")
install.packages("ggplot2")
install.packages("dplyr")
install.packages("reshape")
install.packages("reshape2")
library(datasets)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars$am_m <- as.factor(mtcars$am, levels = c(automatic, manual))
source('~/.active-rstudio-document', echo=TRUE)
library(datasets)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars$am_m <- as.factor(mtcars$am, levels = c("automatic", "manual"))
library(datasets)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars$am_m <- as.factor(mtcars$am, labels = c("automatic", "manual"))
library(datasets)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars$am_m <- factor(mtcars$am, labels = c("automatic", "manual"))
p <- ggplot(mtcars, aes(a,_m, mpg))
p + geom_boxplot()
p <- ggplot(mtcars, aes(am_m, mpg))
p + geom_boxplot()
p
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_boxplot()
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("ggplot2")
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_boxplot()
library(datasets)
library(ggplot2)
library(dplyr)
data(mtcars)
mtcars$am_m <- factor(mtcars$am, labels = c("automatic", "manual"))
p <- ggplot(mtcars, aes(factor(cyl), mpg))
p + geom_boxplot()
p <- ggplot(mtcars, aes(mtcars$am, mpg))
p + geom_boxplot()
p <- ggplot(mtcars, aes(mtcars$am_m, mpg))
p + geom_boxplot()
p <- ggplot(mtcars, aes(mtcars$am_m, mpg)) +
geom_boxplot() + xlab("Transmission Type") + ylab("Miles per Gallon")
p <- ggplot(mtcars, aes(mtcars$am_m, mpg)) +
geom_boxplot() + xlab("Transmission Type") + ylab("Miles per Gallon")
p
initialmodel <- lm(mpg ~ ., data = mtcars)
bestmodel <- step(initialmodel, direction = "both")
plotmatrix(mtcars[,1:3])
p <- ggplot(mtcars, aes(mtcars$am_m, mpg)) +
geom_boxplot() + xlab("Transmission Type") + ylab("Miles per Gallon")
p
plotmatrix(mtcars[,1:3])
ggpairs(data, alpha=0.4)
install.packages("GGally")
ggpairs(data, alpha=0.4)
library(GGally)
ggpairs(data, alpha=0.4)
ggpairs(mtcars, alpha=0.4)
pairs(mpg ~ ., data = mtcars)
t.test(mpg ~ am, data = mtcars)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
t.test(mpg ~ am, data = mtcars)$pvalue
t.test(mpg ~ am, data = mtcars)$p.value
summary(bestmodel)
par(mfrow=c(2, 2))
plot(bestmodel)
par(mfrow=c(2, 2))
plot(bestmodel)
influential <- dfbetas(bestmodel)
tail(sort(influential[,6]),3)
leverage
leverage <- hatvalues(bestmodel)
tail(sort(leverage),3)
leverage
arrange(leverage)
melt(leverage)
library(reshape)
melt(leverage)
leverage <- hatvalues(bestmodel)
melt(leverage)
arrange(leverage, value)
leverage <- hatvalues(bestmodel)
leverage <- melt(leverage)
arrange(leverage, value)
leverage <- hatvalues(bestmodel)
leverage <- df(melt(leverage))
arrange(leverage, desc(value)
leverage <- hatvalues(bestmodel)
leverage <- df(melt(leverage))
arrange(leverage, desc(value))
leverage <- hatvalues(bestmodel)
leverage <- df_tbl(melt(leverage))
arrange(leverage, desc(value))
leverage
melt(leverage)
leverage <- hatvalues(bestmodel)
leverage <- tbl_df(melt(leverage))
arrange(leverage, desc(value))
source('~/.active-rstudio-document', echo=TRUE)
rownames(leverage)
leverage <- hatvalues(bestmodel)
leverage <- melt(leverage)
d[order(-leverage$value), , drop = FALSE]
leverage <- hatvalues(bestmodel)
leverage <- melt(leverage)
leverage[order(-leverage$value), , drop = FALSE]
leverage <- hatvalues(bestmodel)
leverage <- melt(leverage)
leverage[order(-leverage$value), , drop = FALSE][3, ]
leverage <- hatvalues(bestmodel)
leverage <- melt(leverage)
leverage[order(-leverage$value), , drop = FALSE][1:3, ]
leverage <- hatvalues(bestmodel)
leverage <- melt(leverage)
head(leverage[order(-leverage$value), , drop = FALSE], 3)
influential <- dfbetas(bestmodel)
influential <- melt(influential)
head(influential[order(-influential$value), , drop = FALSE], 3)
influential <- dfbetas(bestmodel)
influential
influential <- dfbetas(bestmodel)
tail(sort(influential[,6]),3)
install.packages("xlsx")
install.packages("gdata")
install.packages("ebimage")
install.packages("bioctite")
source("https://bioconductor.org/biocLite.R")
biocLite("EBImage")
source('/Volumes/MikeFlash/Google Drive/Coursera/JHU_Data_Science/08_Practical Machine Learning/week2/PCA.R', echo=TRUE)
install.packages("caret")
source('/Volumes/MikeFlash/Google Drive/Coursera/JHU_Data_Science/08_Practical Machine Learning/week2/PCA.R', echo=TRUE)
source('/Volumes/MikeFlash/Google Drive/Coursera/JHU_Data_Science/08_Practical Machine Learning/week2/PCA.R', echo=TRUE)
install.packages("ISLR")
source('/Volumes/MikeFlash/Google Drive/Coursera/JHU_Data_Science/08_Practical Machine Learning/week2/PCA.R', echo=TRUE)
install.packages("Hmisc")
source('/Volumes/MikeFlash/Google Drive/Coursera/JHU_Data_Science/08_Practical Machine Learning/week2/PCA.R', echo=TRUE)
install.packages("gridExtra")
install.packages("kernlab")
source('/Volumes/MikeFlash/Google Drive/Coursera/JHU_Data_Science/08_Practical Machine Learning/week2/PCA.R', echo=TRUE)
install.packages("lattice")
install.packages("ggplot2")
install.packages("dplyr")
source('/Volumes/MikeFlash/Google Drive/Coursera/JHU_Data_Science/08_Practical Machine Learning/week2/PCA.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("dplyr")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
install.packages("e1071")
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
p2$print()
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
setwd('rCharts_morris_standalone')
# reproduce the post
require(slidify) # dev version
slidify('index.Rmd')
system('open index.html')
rCharts morris.js Examples
morris.js offers some of the best time series handling of all the js libraries provided through rCharts. This makes it ideal for much of the time-series financial analysis performed in PerformanceAnalytics.
Cumulative Growth Line Chart
As a first example, let's build a cumulative growth line chart. It takes only a few lines of code to produce the chart.
# initial setup
require(rCharts)
require(reshape2)
require(PerformanceAnalytics)
data(edhec)
# nice with Morris that we can do with melt or
# without
edhec.df <- data.frame(format(index(edhec), "%Y-%m-%d"),
apply(1 + coredata(edhec), MARGIN = 2, FUN = cumprod),
stringsAsFactors = FALSE)
colnames(edhec.df) <- c("date", gsub(x = colnames(edhec),
pattern = " ", replacement = ""))
m1a <- mPlot(x = "date", y = colnames(edhec.df)[2:NCOL(edhec.df)],
data = edhec.df, type = "Line")
m1a$set(pointSize = 0)
m1a$set(hideHover = "auto")
m1a$print()
0
1
2
3
4
2009
2007
2005
2003
2001
1999
Grouped Bar of Annual Returns by Year
As another example, let's look at a grouped bar chart plotting the annual return for each year by manager/index.
data(managers)
# get calendar year returns so starting at 13
# monthly returns are 1 through 12
perf <- data.frame(table.CalendarReturns(managers[,
c(1, 8, 9)])[, 13:(12 + NCOL(managers[, c(1, 8,
9)]))], stringsAsFactors = FALSE)
# make rownames a column
perf <- data.frame(rownames(perf), perf, row.names = NULL)
# add date to column names and remove . from
# column names to not confuse js
colnames(perf) <- c("date", gsub(x = colnames(perf[-1]),
pattern = "[.]", replacement = ""))
# build the plot
m2 <- mPlot(x = "date", y = colnames(perf)[-1], data = perf,
type = "Bar")
# not pretty colors but an example how we can
# specify
m2$set(barColors = brewer.pal(10, "BrBG")[c(8, 4, 5)])
m2$set(postUnits = "%")
m2$set(hideHover = "auto")
m2$print()
-35%
-17.5%
0%
17.5%
35%
2006
2004
2002
2000
1998
1996
Grouped Bar Return Statistics
Another way to use a grouped bar in a manager performance setting might be a look at cumulative or rolling performance statistics. In this case, the x-axis will be an ordinal scale instead of a date-time scale.
data(managers)
# get columns 3 through 12 and 14 as statistics
# with similar ranges
pastats <- data.frame(table.Stats(managers[, c(1, 8,
9)])[c(3:12, 14), ], stringsAsFactors = FALSE) *
100
# make rownames a column
pastats <- data.frame(rownames(pastats), pastats, row.names = NULL)
# add date to column names and remove . from
# column names to not confuse js
colnames(pastats) <- c("metric", gsub(x = colnames(pastats[-1]),
pattern = "[.]", replacement = ""))
# build the plot
m3 <- mPlot(x = "metric", y = colnames(pastats)[-1],
data = pastats, type = "Bar", width = 1000)
# not pretty colors but an example how we can
# specify
m3$set(barColors = brewer.pal(9, "PuBuGn")[c(7, 6,
3)])
# set to add % at end
m3$set(postUnits = "%")
# set to always show hover
m3$set(hideHover = "auto")
m3$print()
-15%
-7.5%
0%
7.5%
15%
Stdev
SE Mean
Geometric Mean
Quartile 1
Comparison to PerformanceAnalytics Charts
These were minimal examples using no additional javascript programming. rCharts allows this capability, and I strongly encourage readers to check out these two examples from the package author Ramnath Vaidyanathan NYT Baseball Strikeout Tutorial and Visualizing the Reinhart and Rogoff Public Debt Study. I will build on these examples to add additional interactivity.
In a future session I will compare the javascript interactive plots to the static graphics from R. I think most will agree that for most cases an interactive presentation will allow much better analysis and communication.
Maintained by TimelyPortfolio
Hosted on GitHub Pages — Theme by orderedlist
install.packages("slidify")
example("plot")
demo(Japanese)
browseVignettes()
matrix(1:7, nrow = 7, ncol = 7)
matrix(1:10, nrow = 5)
matrix(1:10, nrow = 5, ncol = 5)
x <- matrix(1:10, nrow = 5, ncol = 5)
apply(x, 2, sum)
apply(x, 1, sum)
sapply(x, sum)
?sapply
x <- list(a = 1:10, beta = exp(-3:3), logic = c(TRUE,FALSE,FALSE,TRUE))
x
lapply(x, quantile, probs = 1:3/4)
sapply(x, quantile)
runif(2, 0, 1)
x <- runif(1000, -5, 5)
y <- x + rnorm(1000) + 3
plot(x,y)
res <- lm( y ~ x )
print(res)
plot(x,y, col=rgb(0.2,0.4,0.6,0.4), main='Linear regression by gradient descent')
abline(res, col='blue')
install.packages("plotly")
plot_ly(z = volcano, type = "surface")
library(plotly)
plot_ly(z = volcano, type = "surface")
shiny::runApp('~/Documents/code/R/Coursera_Data_Science_09_Project')
runApp('~/Documents/code/R/Coursera_Data_Science_09_Project')
source('~/.active-rstudio-document', echo=TRUE)
setwd("~/Documents/code/R/Coursera_Data_Science_09_Project")
source('~/.active-rstudio-document', echo=TRUE)
library(rCharts)
runApp('~/Documents/code/R/Coursera_Data_Science_09_Project')
publish(title = 'Records for Hits in MLB', 'index.html', host = 'rpubs')
publish(user = "eufmike", repo = "Coursera_Data_Science_09_Project")
